 //C# Unity
 // requires a LayerMask
 
        float rayLength = 5f;
        float diagonalRayLength = rayLength * 0.70710678118f; // This number is cos(45 degrees)
        RaycastHit2D[] hits = new RaycastHit2D[8];
        
        hits[0] = Physics2D.Raycast(transform.position, transform.up, rayLength, layerMask);
        hits[1] = Physics2D.Raycast(transform.position, transform.right + transform.up, diagonalRayLength, layerMask);
        hits[2] = Physics2D.Raycast(transform.position, transform.right, rayLength, layerMask);
        hits[3] = Physics2D.Raycast(transform.position, transform.right - transform.up, diagonalRayLength, layerMask);
        hits[4] = Physics2D.Raycast(transform.position, -transform.up, rayLength, layerMask);
        hits[5] = Physics2D.Raycast(transform.position, -transform.right - transform.up, diagonalRayLength, layerMask);
        hits[6] = Physics2D.Raycast(transform.position, -transform.right, rayLength, layerMask);
        hits[7] = Physics2D.Raycast(transform.position, -transform.right + transform.up, diagonalRayLength, layerMask);

        Debug.DrawRay(transform.position, transform.up * rayLength);
        Debug.DrawRay(transform.position, (transform.right + transform.up) * diagonalRayLength);
        Debug.DrawRay(transform.position, transform.right * rayLength);
        Debug.DrawRay(transform.position, (transform.right - transform.up) * diagonalRayLength);
        Debug.DrawRay(transform.position, -transform.up * rayLength);
        Debug.DrawRay(transform.position, (-transform.right - transform.up) * diagonalRayLength);
        Debug.DrawRay(transform.position, -transform.right * rayLength);
        Debug.DrawRay(transform.position, (-transform.right + transform.up) * diagonalRayLength);

//ML Framework related (for filling the SensorBuffer in CollectObservations())
        foreach (RaycastHit2D hit2D in hits)
            if (hit2D == true)
                sensorBuffer.AddObservation(hit2D.distance);
            else sensorBuffer.AddObservation(0f);
