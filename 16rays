 //C# Unity
 // requires a LayerMask
 
        float rayLength = 5f;
        float diagonalRayLength = rayLength * 0.70710678118f; // This number is cos(45 degrees)
        
        RaycastHit2D[] hits = new RaycastHit2D[16];
        hits[0] = Physics2D.Raycast(transform.position, transform.up, rayLength, layerMask);
        hits[1] = Physics2D.Raycast(transform.position, transform.right + transform.up, diagonalRayLength, layerMask);
        hits[2] = Physics2D.Raycast(transform.position, transform.right, rayLength, layerMask);
        hits[3] = Physics2D.Raycast(transform.position, transform.right - transform.up, diagonalRayLength, layerMask);
        hits[4] = Physics2D.Raycast(transform.position, -transform.up, rayLength, layerMask);
        hits[5] = Physics2D.Raycast(transform.position, -transform.right - transform.up, diagonalRayLength, layerMask);
        hits[6] = Physics2D.Raycast(transform.position, -transform.right, rayLength, layerMask);
        hits[7] = Physics2D.Raycast(transform.position, -transform.right + transform.up, diagonalRayLength, layerMask);

        hits[8] = Physics2D.Raycast(transform.position, transform.right + transform.up*2, diagonalRayLength, layerMask);
        hits[9] = Physics2D.Raycast(transform.position, transform.right*2 + transform.up, diagonalRayLength, layerMask);
        hits[10] = Physics2D.Raycast(transform.position, transform.right*2 - transform.up, diagonalRayLength, layerMask);
        hits[11] = Physics2D.Raycast(transform.position, transform.right - transform.up*2, diagonalRayLength, layerMask);

        hits[12] = Physics2D.Raycast(transform.position, -transform.right - transform.up*2, diagonalRayLength, layerMask);
        hits[13] = Physics2D.Raycast(transform.position, -transform.right*2 - transform.up, diagonalRayLength, layerMask);
        hits[14] = Physics2D.Raycast(transform.position, -transform.right*2 + transform.up, diagonalRayLength, layerMask);
        hits[15] = Physics2D.Raycast(transform.position, transform.right + transform.up*2, diagonalRayLength, layerMask);
        
        //Only for MachineLearning Framework
        foreach (RaycastHit2D hit2D in hits)
            if (hit2D == true)
                sensorBuffer.AddObservation(hit2D.distance);
            else sensorBuffer.AddObservation(0f);
